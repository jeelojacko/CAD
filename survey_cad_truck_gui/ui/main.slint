export { PointManager } from "point_manager.slint";
export { LineStyleManager } from "line_style_manager.slint";
export { LayerManager } from "layer_manager.slint";
export { CrossSectionViewer } from "cross_section_viewer.slint";
export { SuperelevationEditor } from "superelevation_editor.slint";
export { EntityInspector } from "entity_inspector.slint";

component Workspace2D inherits Rectangle {
    in-out property <image> image;
    in-out property <bool> click_mode;
    callback clicked(length, length);
    callback mouse_moved(length, length);
    callback pointer_pressed(length, length, PointerEvent);
    callback pointer_released();
    callback scrolled(length, length);
    background: #202020;
    Image {
        source: root.image;
        image-fit: fill;
        width: 100%;
        height: 100%;
    }
    TouchArea {
        width: 100%;
        height: 100%;
        clicked => {
            if root.click_mode {
                root.clicked(self.mouse-x, self.mouse-y);
            }
        }
        pointer-event(event) => {
            if event.kind == PointerEventKind.down {
                root.pointer_pressed(self.mouse-x, self.mouse-y, event);
            } else if event.kind == PointerEventKind.up {
                root.pointer_released();
            } else if event.kind == PointerEventKind.move {
                root.mouse_moved(self.mouse-x, self.mouse-y);
            }
        }
        scroll-event(ev) => {
            root.scrolled(ev.delta_x, ev.delta_y);
            return EventResult.accept;
        }
    }
}

component Workspace3D inherits Rectangle {
    in-out property <image> texture <=> img.source;
    out property <length> requested-texture-width: img.width;
    out property <length> requested-texture-height: img.height;
    callback mouse_moved(length, length);
    callback mouse_exited();
    callback left_pressed(length, length);
    callback right_pressed(length, length);
    callback pointer_released();
    callback scrolled(length, length);
    background: #202020;
    img := Image {
        width: 100%;
        height: 100%;
        image-fit: fill;
    }
    TouchArea {
        width: 100%;
        height: 100%;
        pointer-event(event) => {
            if event.kind == PointerEventKind.down {
                if event.button == PointerEventButton.left {
                    root.left_pressed(self.mouse-x, self.mouse-y);
                } else if event.button == PointerEventButton.right {
                    root.right_pressed(self.mouse-x, self.mouse-y);
                }
            } else if event.kind == PointerEventKind.up {
                root.pointer_released();
            } else if event.kind == PointerEventKind.move {
                root.mouse_moved(self.mouse-x, self.mouse-y);
            } else if event.kind == PointerEventKind.cancel {
                root.mouse_exited();
            }
        }
        scroll-event(ev) => {
            root.scrolled(ev.delta_x, ev.delta_y);
            return EventResult.accept;
        }
    }
}

import { Button, VerticalBox, HorizontalBox, ComboBox, LineEdit, ListView, CheckBox, Palette } from "std-widgets.slint";

export component AddPointDialog inherits Window {
    callback from_file();
    callback manual_keyin();
    callback manual_click();
    title: "Add Point";
    VerticalBox {
        spacing: 6px;
        Button { text: "From File"; clicked => { root.from_file(); } }
        Button { text: "Manual (Key In)"; clicked => { root.manual_keyin(); } }
        Button { text: "Manual (Click on Screen)"; clicked => { root.manual_click(); } }
    }
}

export component KeyInDialog inherits Window {
    in-out property <string> x_value;
    in-out property <string> y_value;
    callback accept();
    callback cancel();
    title: "Enter Point";
    VerticalBox {
        spacing: 6px;
        HorizontalBox {
            Text { color: #FFFFFF; text: "X:"; }
            LineEdit { text <=> root.x_value; }
        }
        HorizontalBox {
            Text { color: #FFFFFF; text: "Y:"; }
            LineEdit { text <=> root.y_value; }
        }
        HorizontalBox {
            spacing: 6px;
            Button { text: "OK"; clicked => { root.accept(); } }
            Button { text: "Cancel"; clicked => { root.cancel(); } }
        }
    }
}

export component StationDistanceDialog inherits Window {
    in-out property <string> x1;
    in-out property <string> y1;
    in-out property <string> x2;
    in-out property <string> y2;
    callback accept();
    callback cancel();
    title: "Station Distance";
    VerticalBox {
        spacing: 6px;
        HorizontalBox {
            Text { color: #FFFFFF; text: "X1:"; }
            LineEdit { text <=> root.x1; }
        }
        HorizontalBox {
            Text { color: #FFFFFF; text: "Y1:"; }
            LineEdit { text <=> root.y1; }
        }
        HorizontalBox {
            Text { color: #FFFFFF; text: "X2:"; }
            LineEdit { text <=> root.x2; }
        }
        HorizontalBox {
            Text { color: #FFFFFF; text: "Y2:"; }
            LineEdit { text <=> root.y2; }
        }
        HorizontalBox {
            spacing: 6px;
            Button { text: "OK"; clicked => { root.accept(); } }
            Button { text: "Cancel"; clicked => { root.cancel(); } }
        }
    }
}

export component LevelElevationDialog inherits Window {
    in-out property <string> start_elev;
    in-out property <string> backsight;
    in-out property <string> foresight;
    callback accept();
    callback cancel();
    title: "Level Elevation";
    VerticalBox {
        spacing: 6px;
        HorizontalBox {
            Text { color: #FFFFFF; text: "Start Elev:"; }
            LineEdit { text <=> root.start_elev; }
        }
        HorizontalBox {
            Text { color: #FFFFFF; text: "Backsight:"; }
            LineEdit { text <=> root.backsight; }
        }
        HorizontalBox {
            Text { color: #FFFFFF; text: "Foresight:"; }
            LineEdit { text <=> root.foresight; }
        }
        HorizontalBox {
            spacing: 6px;
            Button { text: "OK"; clicked => { root.accept(); } }
            Button { text: "Cancel"; clicked => { root.cancel(); } }
        }
    }
}

export component CorridorVolumeDialog inherits Window {
    in-out property <string> width_value;
    in-out property <string> interval_value;
    in-out property <string> offset_step_value;
    callback accept();
    callback cancel();
    title: "Corridor Volume";
    VerticalBox {
        spacing: 6px;
        HorizontalBox {
            Text { color: #FFFFFF; text: "Width:"; }
            LineEdit { text <=> root.width_value; }
        }
        HorizontalBox {
            Text { color: #FFFFFF; text: "Interval:"; }
            LineEdit { text <=> root.interval_value; }
        }
        HorizontalBox {
            Text { color: #FFFFFF; text: "Offset Step:"; }
            LineEdit { text <=> root.offset_step_value; }
        }
        HorizontalBox {
            spacing: 6px;
            Button { text: "OK"; clicked => { root.accept(); } }
            Button { text: "Cancel"; clicked => { root.cancel(); } }
        }
    }
}

export component DesignSectionDialog inherits Window {
    in-out property <string> start_station;
    in-out property <string> end_station;
    in-out property <string> interval;
    in-out property <string> lane_width;
    in-out property <string> lane_slope;
    in-out property <string> shoulder_width;
    in-out property <string> shoulder_slope;
    callback accept();
    callback cancel();
    title: "Design Sections";
    VerticalBox {
        spacing: 6px;
        HorizontalBox { Text { color: #FFFFFF; text: "Start Station:"; } LineEdit { text <=> root.start_station; } }
        HorizontalBox { Text { color: #FFFFFF; text: "End Station:"; } LineEdit { text <=> root.end_station; } }
        HorizontalBox { Text { color: #FFFFFF; text: "Interval:"; } LineEdit { text <=> root.interval; } }
        HorizontalBox { Text { color: #FFFFFF; text: "Lane Width:"; } LineEdit { text <=> root.lane_width; } }
        HorizontalBox { Text { color: #FFFFFF; text: "Lane Slope:"; } LineEdit { text <=> root.lane_slope; } }
        HorizontalBox { Text { color: #FFFFFF; text: "Shoulder Width:"; } LineEdit { text <=> root.shoulder_width; } }
        HorizontalBox { Text { color: #FFFFFF; text: "Shoulder Slope:"; } LineEdit { text <=> root.shoulder_slope; } }
        HorizontalBox {
            spacing: 6px;
            Button { text: "OK"; clicked => { root.accept(); } }
            Button { text: "Cancel"; clicked => { root.cancel(); } }
        }
    }
}

export component TinVertexDialog inherits Window {
    in-out property <string> surface_index;
    in-out property <string> vertex_index;
    in-out property <string> x_val;
    in-out property <string> y_val;
    in-out property <string> z_val;
    callback accept();
    callback cancel();
    title: "TIN Vertex";
    VerticalBox {
        spacing: 6px;
        HorizontalBox { Text { color: #FFFFFF; text: "Surface:"; } LineEdit { text <=> root.surface_index; } }
        HorizontalBox { Text { color: #FFFFFF; text: "Index:"; } LineEdit { text <=> root.vertex_index; } }
        HorizontalBox { Text { color: #FFFFFF; text: "X:"; } LineEdit { text <=> root.x_val; } }
        HorizontalBox { Text { color: #FFFFFF; text: "Y:"; } LineEdit { text <=> root.y_val; } }
        HorizontalBox { Text { color: #FFFFFF; text: "Z:"; } LineEdit { text <=> root.z_val; } }
        HorizontalBox {
            spacing: 6px;
            Button { text: "OK"; clicked => { root.accept(); } }
            Button { text: "Cancel"; clicked => { root.cancel(); } }
        }
    }
}

export component TinTriangleDialog inherits Window {
    in-out property <string> surface_index;
    in-out property <string> tri_index;
    in-out property <string> v1;
    in-out property <string> v2;
    in-out property <string> v3;
    callback accept();
    callback cancel();
    title: "TIN Triangle";
    VerticalBox {
        spacing: 6px;
        HorizontalBox { Text { color: #FFFFFF; text: "Surface:"; } LineEdit { text <=> root.surface_index; } }
        HorizontalBox { Text { color: #FFFFFF; text: "Index:"; } LineEdit { text <=> root.tri_index; } }
        HorizontalBox { Text { color: #FFFFFF; text: "V1:"; } LineEdit { text <=> root.v1; } }
        HorizontalBox { Text { color: #FFFFFF; text: "V2:"; } LineEdit { text <=> root.v2; } }
        HorizontalBox { Text { color: #FFFFFF; text: "V3:"; } LineEdit { text <=> root.v3; } }
        HorizontalBox {
            spacing: 6px;
            Button { text: "OK"; clicked => { root.accept(); } }
            Button { text: "Cancel"; clicked => { root.cancel(); } }
        }
    }
}

export component AddLineDialog inherits Window {
    callback from_file();
    callback manual();
    title: "Add Line";
    VerticalBox {
        spacing: 6px;
        Button { text: "From File"; clicked => { root.from_file(); } }
        Button { text: "Manual"; clicked => { root.manual(); } }
    }
}

export component LineKeyInDialog inherits Window {
    in-out property <string> x1;
    in-out property <string> y1;
    in-out property <string> x2;
    in-out property <string> y2;
    callback accept();
    callback cancel();
    title: "Enter Line";
    VerticalBox {
        spacing: 6px;
        HorizontalBox {
            Text { color: #FFFFFF; text: "X1:"; }
            LineEdit { text <=> root.x1; }
            Text { color: #FFFFFF; text: "Y1:"; }
            LineEdit { text <=> root.y1; }
        }
        HorizontalBox {
            Text { color: #FFFFFF; text: "X2:"; }
            LineEdit { text <=> root.x2; }
            Text { color: #FFFFFF; text: "Y2:"; }
            LineEdit { text <=> root.y2; }
        }
        HorizontalBox {
            spacing: 6px;
            Button { text: "OK"; clicked => { root.accept(); } }
            Button { text: "Cancel"; clicked => { root.cancel(); } }
        }
    }
}

export component AddPolygonDialog inherits Window {
    callback from_file();
    callback manual();
    title: "Add Polygon";
    VerticalBox {
        spacing: 6px;
        Button { text: "From File"; clicked => { root.from_file(); } }
        Button { text: "Manual"; clicked => { root.manual(); } }
    }
}

export component AddPolylineDialog inherits Window {
    callback from_file();
    callback manual();
    title: "Add Polyline";
    VerticalBox {
        spacing: 6px;
        Button { text: "From File"; clicked => { root.from_file(); } }
        Button { text: "Manual"; clicked => { root.manual(); } }
    }
}

export component PointsDialog inherits Window {
    in-out property <string> x_value;
    in-out property <string> y_value;
    in-out property <[string]> points_model;
    callback add_point();
    callback accept();
    callback cancel();
    title: "Enter Points";
    VerticalBox {
        spacing: 6px;
        HorizontalBox {
            Text { color: #FFFFFF; text: "X:"; }
            LineEdit { text <=> root.x_value; }
            Text { color: #FFFFFF; text: "Y:"; }
            LineEdit { text <=> root.y_value; }
            Button { text: "Add"; clicked => { root.add_point(); } }
        }
        ListView {
            for p in root.points_model : Text { color: #FFFFFF; text: p; }
            height: 100px;
        }
        HorizontalBox {
            spacing: 6px;
            Button { text: "OK"; clicked => { root.accept(); } }
            Button { text: "Cancel"; clicked => { root.cancel(); } }
        }
    }
}

export component AddArcDialog inherits Window {
    callback from_file();
    callback manual();
    title: "Add Arc";
    VerticalBox {
        spacing: 6px;
        Button { text: "From File"; clicked => { root.from_file(); } }
        Button { text: "Manual"; clicked => { root.manual(); } }
    }
}

export component ArcKeyInDialog inherits Window {
    in-out property <string> cx;
    in-out property <string> cy;
    in-out property <string> radius;
    in-out property <string> start_angle;
    in-out property <string> end_angle;
    callback accept();
    callback cancel();
    title: "Enter Arc";
    VerticalBox {
        spacing: 6px;
        HorizontalBox {
            Text { color: #FFFFFF; text: "Cx:"; }
            LineEdit { text <=> root.cx; }
            Text { color: #FFFFFF; text: "Cy:"; }
            LineEdit { text <=> root.cy; }
        }
        HorizontalBox {
            Text { color: #FFFFFF; text: "Radius:"; }
            LineEdit { text <=> root.radius; }
        }
        HorizontalBox {
            Text { color: #FFFFFF; text: "Start:"; }
            LineEdit { text <=> root.start_angle; }
            Text { color: #FFFFFF; text: "End:"; }
            LineEdit { text <=> root.end_angle; }
        }
        HorizontalBox {
            spacing: 6px;
            Button { text: "OK"; clicked => { root.accept(); } }
            Button { text: "Cancel"; clicked => { root.cancel(); } }
        }
    }
}

export component ArcModeDialog inherits Window {
    callback center_start_end();
    callback three_point();
    callback start_end_radius();
    title: "Arc Mode";
    VerticalBox {
        spacing: 6px;
        Button { text: "Center-Start-End"; clicked => { root.center_start_end(); } }
        Button { text: "Three Point"; clicked => { root.three_point(); } }
        Button { text: "Start-End-Radius"; clicked => { root.start_end_radius(); } }
    }
}

export component MoveEntityDialog inherits Window {
    in-out property <string> dx_value;
    in-out property <string> dy_value;
    callback accept();
    callback cancel();
    title: "Move Entities";
    VerticalBox {
        spacing: 6px;
        HorizontalBox { Text { color: #FFFFFF; text: "DX:"; } LineEdit { text <=> root.dx_value; } }
        HorizontalBox { Text { color: #FFFFFF; text: "DY:"; } LineEdit { text <=> root.dy_value; } }
        HorizontalBox {
            spacing: 6px;
            Button { text: "OK"; clicked => { root.accept(); } }
            Button { text: "Cancel"; clicked => { root.cancel(); } }
        }
    }
}

export component RotateEntityDialog inherits Window {
    in-out property <string> angle_value;
    callback accept();
    callback cancel();
    title: "Rotate Entities";
    VerticalBox {
        spacing: 6px;
        HorizontalBox { Text { color: #FFFFFF; text: "Angle:"; } LineEdit { text <=> root.angle_value; } }
        HorizontalBox {
            spacing: 6px;
            Button { text: "OK"; clicked => { root.accept(); } }
            Button { text: "Cancel"; clicked => { root.cancel(); } }
        }
    }
}

export component SettingsDialog inherits Window {
    in-out property <string> spacing_value;
    in-out property <string> color_r;
    in-out property <string> color_g;
    in-out property <string> color_b;
    in-out property <bool> show_grid;
    callback accept();
    callback cancel();
    title: "Workspace Settings";
    VerticalBox {
        spacing: 6px;
        HorizontalBox {
            Text { color: #FFFFFF; text: "Grid Spacing:"; }
            LineEdit { text <=> root.spacing_value; width: 60px; }
        }
        HorizontalBox {
            Text { color: #FFFFFF; text: "Grid Color:"; }
            LineEdit { text <=> root.color_r; width: 40px; }
            LineEdit { text <=> root.color_g; width: 40px; }
            LineEdit { text <=> root.color_b; width: 40px; }
        }
        CheckBox { text: "Show Grid"; checked <=> root.show_grid; }
        HorizontalBox {
            spacing: 6px;
            Button { text: "OK"; clicked => { root.accept(); } }
            Button { text: "Cancel"; clicked => { root.cancel(); } }
        }
    }
}

export component MainWindow inherits Window {
    preferred-width: 800px;
    preferred-height: 600px;

    in-out property <string> status;
    in property <[string]> crs_list;
    in-out property <int> crs_index;
    in property <[string]> cogo_list;
    in-out property <int> cogo_index;
    in-out property <int> workspace_mode;
    in-out property <image> workspace_image;
    in-out property <image> workspace_texture;
    in-out property <bool> workspace_click_mode;
    in-out property <bool> snap_to_grid;
    in-out property <bool> snap_to_entities;
    in-out property <bool> show_point_numbers;
    in-out property <bool> snap_endpoints;
    in-out property <bool> snap_midpoints;
    in-out property <bool> snap_intersections;
    in-out property <bool> snap_nearest;
    in-out property <float> zoom_level;

    callback key_pressed(string);
    FocusScope {
        key-pressed(event) => { root.key_pressed(event.text); return EventResult.accept; }
    }

    callback draw_line_mode();
    callback draw_polygon_mode();
    callback draw_arc_mode();
    callback draw_dimension_mode();

    callback workspace_clicked(length, length);
    callback workspace_mouse_moved(length, length);
    callback workspace_mouse_exited();

    callback crs_changed(int);
    callback cogo_selected(int);

    callback new_project();
    callback open_project();
    callback save_project();
    callback add_point();
    callback add_line();
    callback add_polygon();
    callback add_polyline();
    callback add_arc();
    callback create_polygon_from_selection();
    callback create_surface_from_selection();
    callback clear_workspace();
    callback view_changed(int);
    callback station_distance();
    callback traverse_area();
    callback level_elevation_tool();
    callback corridor_volume();
    callback design_cross_sections();
    callback view_cross_sections();
    callback superelevation_editor();
    callback point_numbers_changed(bool);
    callback snap_grid_changed(bool);
    callback snap_objects_changed(bool);
    callback snap_endpoints_changed(bool);
    callback snap_midpoints_changed(bool);
    callback snap_intersections_changed(bool);
    callback snap_nearest_changed(bool);
    callback point_manager();
    callback line_style_manager();
    callback layer_manager();
    callback inspector();
    callback import_geojson();
    callback import_kml();
    callback import_dxf();
    callback import_shp();
    callback import_polylines_shp();
    callback import_polygons_shp();
    callback import_las();
    callback import_e57();
    callback export_geojson();
    callback export_kml();
    callback export_dxf();
    callback export_shp();
    callback export_polylines_shp();
    callback export_polygons_shp();
    callback export_las();
    callback export_e57();
    callback export_landxml_surface();
    callback export_landxml_alignment();
    callback import_landxml_surface();
    callback import_landxml_alignment();
    callback tin_add_vertex();
    callback tin_move_vertex();
    callback tin_delete_vertex();
    callback tin_add_triangle();
    callback tin_delete_triangle();
    callback macro_record();
    callback macro_play();
    callback undo();
    callback redo();
    callback move_entity();
    callback rotate_entity();
    callback zoom_in();
    callback zoom_out();
    callback settings();
    callback workspace_left_pressed(length, length);
    callback workspace_right_pressed(length, length);
    callback workspace_pointer_pressed(length, length, PointerEvent);
    callback workspace_pointer_released();
    callback workspace_scrolled(length, length);

    menubar := MenuBar {
        Menu {
            title: "File";
            MenuItem { title: "New"; activated => { root.new_project(); } }
            MenuItem { title: "Open"; activated => { root.open_project(); } }
            MenuItem { title: "Save"; activated => { root.save_project(); } }
            Menu {
                title: "Import";
                MenuItem { title: "GeoJSON"; activated => { root.import_geojson(); } }
                MenuItem { title: "KML"; activated => { root.import_kml(); } }
                MenuItem { title: "DXF"; activated => { root.import_dxf(); } }
                MenuItem { title: "SHP"; activated => { root.import_shp(); } }
                MenuItem { title: "Polyline SHP"; activated => { root.import_polylines_shp(); } }
                MenuItem { title: "Polygon SHP"; activated => { root.import_polygons_shp(); } }
                MenuItem { title: "LAS"; activated => { root.import_las(); } }
                MenuItem { title: "E57"; activated => { root.import_e57(); } }
                MenuItem { title: "LandXML Surface"; activated => { root.import_landxml_surface(); } }
                MenuItem { title: "LandXML Alignment"; activated => { root.import_landxml_alignment(); } }
            }
            Menu {
                title: "Export";
                MenuItem { title: "GeoJSON"; activated => { root.export_geojson(); } }
                MenuItem { title: "KML"; activated => { root.export_kml(); } }
                MenuItem { title: "DXF"; activated => { root.export_dxf(); } }
                MenuItem { title: "SHP"; activated => { root.export_shp(); } }
                MenuItem { title: "Polyline SHP"; activated => { root.export_polylines_shp(); } }
                MenuItem { title: "Polygon SHP"; activated => { root.export_polygons_shp(); } }
                MenuItem { title: "LAS"; activated => { root.export_las(); } }
                MenuItem { title: "E57"; activated => { root.export_e57(); } }
                MenuItem { title: "LandXML Surface"; activated => { root.export_landxml_surface(); } }
                MenuItem { title: "LandXML Alignment"; activated => { root.export_landxml_alignment(); } }
            }
        }
        Menu {
            title: "Edit";
            MenuItem { title: "Undo"; activated => { root.undo(); } }
            MenuItem { title: "Redo"; activated => { root.redo(); } }
            MenuItem { title: "Add Point"; activated => { root.add_point(); } }
            MenuItem { title: "Add Line"; activated => { root.add_line(); } }
            MenuItem { title: "Add Polygon"; activated => { root.add_polygon(); } }
            MenuItem { title: "Add Polyline"; activated => { root.add_polyline(); } }
            MenuItem { title: "Add Arc"; activated => { root.add_arc(); } }
            MenuItem { title: "Line Mode"; activated => { root.draw_line_mode(); } }
            MenuItem { title: "Polygon Mode"; activated => { root.draw_polygon_mode(); } }
            MenuItem { title: "Arc Mode"; activated => { root.draw_arc_mode(); } }
            MenuItem { title: "Dimension Mode"; activated => { root.draw_dimension_mode(); } }
            MenuItem { title: "Move Entities"; activated => { root.move_entity(); } }
            MenuItem { title: "Rotate Entities"; activated => { root.rotate_entity(); } }
            MenuItem { title: "Create Polygon from Selection"; activated => { root.create_polygon_from_selection(); } }
            MenuItem { title: "Create Surface from Selection"; activated => { root.create_surface_from_selection(); } }
            MenuItem { title: "Point Manager..."; activated => { root.point_manager(); } }
            MenuItem { title: "Line Styles..."; activated => { root.line_style_manager(); } }
            MenuItem { title: "Layer Manager..."; activated => { root.layer_manager(); } }
            MenuItem { title: "Inspector..."; activated => { root.inspector(); } }
            MenuItem { title: "Clear"; activated => { root.clear_workspace(); } }
        }
        Menu {
            title: "Tools";
            MenuItem { title: "Station Distance"; activated => { root.station_distance(); } }
            MenuItem { title: "Traverse Area"; activated => { root.traverse_area(); } }
            MenuItem { title: "Level Elevation"; activated => { root.level_elevation_tool(); } }
            MenuItem { title: "Corridor Volume"; activated => { root.corridor_volume(); } }
            MenuItem { title: "Superelevation..."; activated => { root.superelevation_editor(); } }
            MenuItem { title: "Design Sections"; activated => { root.design_cross_sections(); } }
            MenuItem { title: "Cross Sections"; activated => { root.view_cross_sections(); } }
        }
        Menu {
            title: "TIN";
            MenuItem { title: "Add Vertex"; activated => { root.tin_add_vertex(); } }
            MenuItem { title: "Move Vertex"; activated => { root.tin_move_vertex(); } }
            MenuItem { title: "Delete Vertex"; activated => { root.tin_delete_vertex(); } }
            MenuItem { title: "Add Triangle"; activated => { root.tin_add_triangle(); } }
            MenuItem { title: "Delete Triangle"; activated => { root.tin_delete_triangle(); } }
        }
        Menu {
            title: "View";
            MenuItem { title: "2D Workspace"; activated => { root.view_changed(0); } }
            MenuItem { title: "3D Workspace"; activated => { root.view_changed(1); } }
            MenuItem { title: "Zoom In"; activated => { root.zoom_in(); } }
            MenuItem { title: "Zoom Out"; activated => { root.zoom_out(); } }
            MenuItem { title: "Settings..."; activated => { root.settings(); } }
        }
        Menu {
            title: "Macro";
            MenuItem { title: "Record"; activated => { root.macro_record(); } }
            MenuItem { title: "Play"; activated => { root.macro_play(); } }
        }
    }

    VerticalBox {
        x: 0;
        y: 0;
        width: 100%;
        height: 100%;
        spacing: 0px;

        toolbar1 := HorizontalBox {
            width: 100%;
            height: 30px;
            spacing: 6px;
            Button {
                text: "New";
                clicked => { root.new_project(); }
            }
            Button {
                text: "Open";
                clicked => { root.open_project(); }
            }
            Button {
                text: "Save";
                clicked => { root.save_project(); }
            }
            Button {
                text: "Add Point";
                clicked => { root.add_point(); }
            }
            Button {
                text: "Point Manager...";
                clicked => { root.point_manager(); }
            }
            Button {
                text: "Line Styles...";
                clicked => { root.line_style_manager(); }
            }
            Button {
                text: "Layer Manager...";
                clicked => { root.layer_manager(); }
            }
            Button {
                text: "Inspector...";
                clicked => { root.inspector(); }
            }
            Button {
                text: "Add Line";
                clicked => { root.add_line(); }
            }
        Button {
                text: "Add Polygon";
                clicked => { root.add_polygon(); }
            }
        Button {
                text: "Add Polyline";
                clicked => { root.add_polyline(); }
            }
        Button {
                text: "Add Arc";
                clicked => { root.add_arc(); }
            }
        Button {
                text: "Line Mode";
                clicked => { root.draw_line_mode(); }
            }
        Button {
                text: "Polygon Mode";
                clicked => { root.draw_polygon_mode(); }
            }
        Button {
                text: "Arc Mode";
                clicked => { root.draw_arc_mode(); }
            }
        Button {
                text: "Dimension Mode";
                clicked => { root.draw_dimension_mode(); }
            }
        Button {
                text: "Move";
                clicked => { root.move_entity(); }
            }
        Button {
                text: "Rotate";
                clicked => { root.rotate_entity(); }
            }
        Button {
                text: "Create Polygon";
                clicked => { root.create_polygon_from_selection(); }
            }
        Button {
                text: "Create Surface";
                clicked => { root.create_surface_from_selection(); }
            }
        Button {
                text: "Load LandXML Surface";
                clicked => { root.import_landxml_surface(); }
            }
        Button {
                text: "Load LandXML Alignment";
                clicked => { root.import_landxml_alignment(); }
            }
        Button {
                text: "Export LandXML Surface";
                clicked => { root.export_landxml_surface(); }
            }
        Button {
                text: "Export LandXML Alignment";
                clicked => { root.export_landxml_alignment(); }
            }
        Button {
                text: "Corridor Volume";
                clicked => { root.corridor_volume(); }
            }
        Button {
                text: "Superelevation...";
                clicked => { root.superelevation_editor(); }
            }
        Button {
                text: "Design Sections";
                clicked => { root.design_cross_sections(); }
            }
        Button {
                text: "Cross Sections";
                clicked => { root.view_cross_sections(); }
            }
        Button {
                text: "Clear";
                clicked => { root.clear_workspace(); }
            }
        Text { color: #FFFFFF; text: "View:"; }
        ComboBox {
            model: ["2D", "3D"];
            current-index <=> root.workspace_mode;
            selected => { root.view_changed(root.workspace_mode); }
        }
        Text { color: #FFFFFF; text: "Cogo:"; }
        ComboBox {
            model: root.cogo_list;
            current-index <=> root.cogo_index;
            selected => { root.cogo_selected(root.cogo_index); }
        }
        }

        toolbar2 := HorizontalBox {
            width: 100%;
            height: 30px;
            spacing: 6px;
        Text { color: #FFFFFF; text: "CRS:"; }
        ComboBox {
            model: root.crs_list;
            current-index <=> root.crs_index;
            selected => { root.crs_changed(root.crs_index); }
        }
        }

        toolbar3 := HorizontalBox {
            width: 100%;
            height: 30px;
            spacing: 6px;
            CheckBox { text: "Snap Grid"; checked <=> root.snap_to_grid; toggled => { root.snap_grid_changed(root.snap_to_grid); } }
            CheckBox { text: "Snap Objects"; checked <=> root.snap_to_entities; toggled => { root.snap_objects_changed(root.snap_to_entities); } }
            CheckBox { text: "Endpoints"; checked <=> root.snap_endpoints; toggled => { root.snap_endpoints_changed(root.snap_endpoints); } }
            CheckBox { text: "Midpoints"; checked <=> root.snap_midpoints; toggled => { root.snap_midpoints_changed(root.snap_midpoints); } }
            CheckBox { text: "Intersections"; checked <=> root.snap_intersections; toggled => { root.snap_intersections_changed(root.snap_intersections); } }
            CheckBox { text: "Nearest"; checked <=> root.snap_nearest; toggled => { root.snap_nearest_changed(root.snap_nearest); } }
            CheckBox {
                text: "Point Numbers";
                checked <=> root.show_point_numbers;
                toggled => { root.point_numbers_changed(root.show_point_numbers); }
            }
            Button { text: "Settings..."; clicked => { root.settings(); } }
        }

        Rectangle {
            width: 100%;
            vertical-stretch: 1;
            min-height: 0px;

            if root.workspace_mode == 0 : Workspace2D {
                x: 0; y: 0; width: 100%; height: 100%;
                image <=> root.workspace_image;
                click_mode <=> root.workspace_click_mode;
                clicked(x, y) => { root.workspace_clicked(x, y); }
                mouse_moved(x, y) => { root.workspace_mouse_moved(x, y); }
                pointer_pressed(x, y, ev) => { root.workspace_pointer_pressed(x, y, ev); }
                pointer_released() => { root.workspace_pointer_released(); }
                scrolled(dx, dy) => { root.workspace_scrolled(dx, dy); }
            }
            if root.workspace_mode == 1 : Workspace3D {
                x: 0; y: 0; width: 100%; height: 100%;
                texture <=> root.workspace_texture;
                mouse_moved(x, y) => { root.workspace_mouse_moved(x, y); }
                mouse_exited() => { root.workspace_mouse_exited(); }
                left_pressed(x, y) => { root.workspace_left_pressed(x, y); }
                right_pressed(x, y) => { root.workspace_right_pressed(x, y); }
                pointer_released() => { root.workspace_pointer_released(); }
                scrolled(dx, dy) => { root.workspace_scrolled(dx, dy); }
            }
        }

        status_bar := Text {
            text: root.status;
            width: 100%;
        }
    }
}
