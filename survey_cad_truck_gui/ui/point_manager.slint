export struct PointRow {
    number: string,
    name: string,
    x: string,
    y: string,
    group_index: int,
    style_index: int,
}

import { Button, VerticalBox, HorizontalBox, LineEdit, ComboBox, ListView } from "std-widgets.slint";

component ColumnSeparator inherits Rectangle {
    in-out property <length> column_width;
    property <length> start_x;
    property <length> start_width;
    property <bool> dragging;
    width: 8px;
    height: 100%;
    Rectangle {
        width: 2px;
        height: 100%;
        x: (parent.width - self.width) / 2;
        background: #808080;
    }
    TouchArea {
        width: 100%;
        height: 100%;
        pointer-event(ev) => {
            if ev.kind == PointerEventKind.down {
                root.start_x = self.mouse-x;
                root.start_width = root.column_width;
                root.dragging = true;
            } else if ev.kind == PointerEventKind.up || ev.kind == PointerEventKind.cancel {
                root.dragging = false;
            } else if ev.kind == PointerEventKind.move && root.dragging {
                root.column_width = root.start_width + self.mouse-x - root.start_x;
            }
        }
    }
}

export component PointManager inherits Window {
    in-out property <[PointRow]> points_model;
    in-out property <[string]> groups_model;
    in-out property <[string]> styles_model;
    in-out property <int> selected_index;
    callback add_point();
    callback remove_point(int);
    callback create_group();
    callback rename_group();
    callback edit_name(int, string);
    callback edit_x(int, string);
    callback edit_y(int, string);
    callback group_changed(int, int);
    callback style_changed(int, int);
    property <length> number_width: 30px;
    property <length> name_width: 250px;
    property <length> x_width: 60px;
    property <length> y_width: 60px;
    property <length> group_width: 80px;
    property <length> style_width: 80px;
    title: "Point Manager";
    width: 600px;
    height: 400px;

    VerticalBox {
        spacing: 4px;
        Rectangle {
            width: 100%;
            height: 20px;
            border-width: 1px;
            border-color: #808080;
            HorizontalLayout {
                spacing: 0px;
                Text { text: "#"; width: root.number_width; }
                ColumnSeparator { column_width <=> root.number_width; }
                Text { text: "Name"; width: root.name_width; }
                ColumnSeparator { column_width <=> root.name_width; }
                Text { text: "X"; width: root.x_width; }
                ColumnSeparator { column_width <=> root.x_width; }
                Text { text: "Y"; width: root.y_width; }
                ColumnSeparator { column_width <=> root.y_width; }
                Text { text: "Group"; width: root.group_width; }
                ColumnSeparator { column_width <=> root.group_width; }
                Text { text: "Style"; width: root.style_width; }
            }
        }
        ListView {
            vertical-stretch: 1;
            vertical-alignment: start;
            for row[i] in root.points_model : Rectangle {
                property <bool> selected: root.selected_index == i;
                background: selected ? #404040 : transparent;
                height: 24px;
                HorizontalLayout {
                    spacing: 8px;
                    Text {
                        text: row.number;
                        width: root.number_width;
                        TouchArea {
                            x: 0px;
                            y: 0px;
                            width: parent.width;
                            height: parent.height;
                            clicked => { root.selected_index = i; }
                        }
                    }
                    LineEdit { text: row.name; width: root.name_width; edited(text) => { root.edit_name(i, text); } }
                    LineEdit { text: row.x; width: root.x_width; edited(text) => { root.edit_x(i, text); } }
                    LineEdit { text: row.y; width: root.y_width; edited(text) => { root.edit_y(i, text); } }
                    ComboBox {
                        model: root.groups_model;
                        current-index: row.group_index;
                        selected => { root.group_changed(i, self.current-index); }
                        width: root.group_width;
                    }
                    ComboBox {
                        model: root.styles_model;
                        current-index: row.style_index;
                        selected => { root.style_changed(i, self.current-index); }
                        width: root.style_width;
                    }
                }
            }
        }
        HorizontalBox {
            spacing: 6px;
            Button { text: "Add Point"; clicked => { root.add_point(); } }
            Button { text: "Remove"; clicked => { root.remove_point(root.selected_index); } }
            Button { text: "New Group"; clicked => { root.create_group(); } }
            Button { text: "Rename Group"; clicked => { root.rename_group(); } }
        }
    }
}
