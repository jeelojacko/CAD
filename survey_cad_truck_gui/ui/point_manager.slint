export struct PointRow {
    number: string,
    name: string,
    x: string,
    y: string,
    group_index: int,
    style: string,
}

import { Button, VerticalBox, HorizontalBox, LineEdit, ComboBox, ListView } from "std-widgets.slint";

export component PointManager inherits Window {
    in-out property <[PointRow]> points_model;
    in-out property <[string]> groups_model;
    in-out property <int> selected_index;
    callback add_point();
    callback remove_point(int);
    callback create_group();
    callback rename_group();
    callback edit_name(int, string);
    callback edit_x(int, string);
    callback edit_y(int, string);
    callback group_changed(int, int);
    callback select_style(int);
    title: "Point Manager";
    width: 600px;
    height: 400px;

    VerticalBox {
        spacing: 4px;
        Rectangle {
            width: 100%;
            height: 20px;
            border-width: 1px;
            border-color: #808080;
            HorizontalLayout {
                spacing: 8px;
                Text { text: "#"; width: 30px; }
                Text { text: "Name"; horizontal-stretch: 1; }
                Text { text: "X"; width: 60px; }
                Text { text: "Y"; width: 60px; }
                Text { text: "Group"; width: 80px; }
                Text { text: "Style"; width: 60px; }
            }
        }
        ListView {
            vertical-stretch: 1;
            for row[i] in root.points_model : Rectangle {
                property <bool> selected: root.selected_index == i;
                background: selected ? #404040 : transparent;
                height: 24px;
                HorizontalLayout {
                    spacing: 8px;
                    Text { text: row.number; width: 30px; }
                    LineEdit { text: row.name; horizontal-stretch: 1; edited(text) => { root.edit_name(i, text); } }
                    LineEdit { text: row.x; width: 60px; edited(text) => { root.edit_x(i, text); } }
                    LineEdit { text: row.y; width: 60px; edited(text) => { root.edit_y(i, text); } }
                    ComboBox {
                        model: root.groups_model;
                        current-index: row.group_index;
                        selected => { root.group_changed(i, self.current-index); }
                        width: 80px;
                    }
                    Button { text: row.style; clicked => { root.select_style(i); } width: 60px; }
                }
                TouchArea { width: 100%; height: 100%; clicked => { root.selected_index = i; } }
            }
        }
        HorizontalBox {
            spacing: 6px;
            Button { text: "Add Point"; clicked => { root.add_point(); } }
            Button { text: "Remove"; clicked => { root.remove_point(root.selected_index); } }
            Button { text: "New Group"; clicked => { root.create_group(); } }
            Button { text: "Rename Group"; clicked => { root.rename_group(); } }
        }
    }
}
